<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.ponfee.disjob.supervisor.dao.mapper.SchedJobMapper">

  <sql id="Table_Name">sched_job</sql>

  <sql id="Base_Column_List">
    job_id, job_group, job_name, job_handler, job_state, job_type, job_param, retry_type,
    retry_count, retry_interval, start_time, end_time, trigger_type, trigger_value, execute_timeout,
    collision_strategy, misfire_strategy, route_strategy, weight_score, remark, last_trigger_time,
    next_trigger_time, next_scan_time, failed_scan_count, alarm_subscribers, version,
    IFNULL(is_deleted, 1) deleted, updated_by, created_by, updated_at, created_at
  </sql>

  <!-- ********************use int test start******************** -->
  <select id="testFindByJobIds" parameterType="collection" resultType="cn.ponfee.disjob.core.model.SchedJob">
    SELECT job_id jobId, remark
    FROM <include refid="Table_Name" />
    WHERE job_id IN (<foreach collection="collection" index="index" separator="," item="jobId">#{jobId,jdbcType=BIGINT}</foreach>)
  </select>
  <select id="testListLimit" parameterType="int" resultType="long">
    SELECT job_id FROM <include refid="Table_Name" /> LIMIT #{limit,jdbcType=INTEGER}
  </select>
  <update id="testUpdateRemark">
    UPDATE <include refid="Table_Name" />
    SET remark = #{remark,jdbcType=VARCHAR}, version = version+1
    WHERE job_id = #{jobId,jdbcType=BIGINT}
  </update>
  <!-- ********************use int test end******************** -->

  <select id="findByJobIds" parameterType="collection" resultType="cn.ponfee.disjob.core.model.SchedJob">
    SELECT <include refid="Base_Column_List"/>
    FROM <include refid="Table_Name" />
    WHERE job_id IN (<foreach collection="collection" index="index" separator="," item="jobId">#{jobId,jdbcType=BIGINT}</foreach>)
      AND is_deleted = 0
  </select>

  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="cn.ponfee.disjob.core.model.SchedJob" useGeneratedKeys="true">
    INSERT INTO <include refid="Table_Name" /> (
      job_id,
      job_group,
      job_name,
      job_handler,
      job_state,
      job_type,
      job_param,
      retry_type,
      retry_count,
      retry_interval,
      start_time,
      end_time,
      trigger_type,
      trigger_value,
      execute_timeout,
      collision_strategy,
      misfire_strategy,
      route_strategy,
      weight_score,
      remark,
      next_trigger_time,
      alarm_subscribers,
      updated_by,
      created_by
    ) VALUES (
      #{jobId,jdbcType=BIGINT},
      #{jobGroup,jdbcType=VARCHAR},
      #{jobName,jdbcType=VARCHAR},
      #{jobHandler,jdbcType=LONGVARCHAR},
      #{jobState,jdbcType=TINYINT},
      #{jobType,jdbcType=TINYINT},
      #{jobParam,jdbcType=LONGVARCHAR},
      #{retryType,jdbcType=TINYINT},
      #{retryCount,jdbcType=TINYINT},
      #{retryInterval,jdbcType=INTEGER},
      #{startTime,jdbcType=TIMESTAMP},
      #{endTime,jdbcType=TIMESTAMP},
      #{triggerType,jdbcType=TINYINT},
      #{triggerValue,jdbcType=VARCHAR},
      #{executeTimeout,jdbcType=INTEGER},
      #{collisionStrategy,jdbcType=TINYINT},
      #{misfireStrategy,jdbcType=TINYINT},
      #{routeStrategy,jdbcType=TINYINT},
      #{weightScore,jdbcType=TINYINT},
      #{remark,jdbcType=VARCHAR},
      #{nextTriggerTime,jdbcType=BIGINT},
      #{alarmSubscribers,jdbcType=VARCHAR},
      #{updatedBy,jdbcType=VARCHAR},
      #{createdBy,jdbcType=VARCHAR}
    )
  </insert>

  <update id="updateByJobId" parameterType="cn.ponfee.disjob.core.model.SchedJob">
    UPDATE <include refid="Table_Name" />
    SET job_group = #{jobGroup,jdbcType=VARCHAR},
        job_name = #{jobName,jdbcType=VARCHAR},
        <if test="jobHandler != null and jobHandler != ''">
          job_handler = #{jobHandler,jdbcType=LONGVARCHAR},
          job_param = #{jobParam,jdbcType=LONGVARCHAR},
        </if>
        job_state = #{jobState,jdbcType=TINYINT},
        job_type = #{jobType,jdbcType=TINYINT},
        retry_type = #{retryType,jdbcType=TINYINT},
        retry_count = #{retryCount,jdbcType=TINYINT},
        retry_interval = #{retryInterval,jdbcType=INTEGER},
        start_time = #{startTime,jdbcType=TIMESTAMP},
        end_time = #{endTime,jdbcType=TIMESTAMP},
        <if test="triggerType != null">
          trigger_type = #{triggerType,jdbcType=TINYINT},
          trigger_value = #{triggerValue,jdbcType=VARCHAR},
        </if>
        next_trigger_time = #{nextTriggerTime,jdbcType=BIGINT},
        execute_timeout = #{executeTimeout,jdbcType=INTEGER},
        collision_strategy = #{collisionStrategy,jdbcType=TINYINT},
        misfire_strategy = #{misfireStrategy,jdbcType=TINYINT},
        route_strategy = #{routeStrategy,jdbcType=TINYINT},
        weight_score = #{weightScore,jdbcType=TINYINT},
        remark = #{remark,jdbcType=VARCHAR},
        alarm_subscribers = #{alarmSubscribers,jdbcType=VARCHAR},
        version = version+1,
        updated_by = #{updatedBy,jdbcType=VARCHAR}
    WHERE job_id = #{jobId,jdbcType=BIGINT}
      AND version = #{version,jdbcType=INTEGER}
      AND is_deleted = 0
  </update>

  <select id="getByJobId" parameterType="_long" resultType="cn.ponfee.disjob.core.model.SchedJob">
    SELECT <include refid="Base_Column_List" />
    FROM <include refid="Table_Name" />
    WHERE job_id = #{jobId,jdbcType=BIGINT}
      AND is_deleted = 0
  </select>

  <select id="findBeTriggering" resultType="cn.ponfee.disjob.core.model.SchedJob">
    SELECT <include refid="Base_Column_List"/>
    FROM <include refid="Table_Name" />
    WHERE job_state = 1
      AND next_trigger_time &lt; #{maxNextTriggerTime}
      AND next_scan_time &lt; NOW(3)
      AND is_deleted = 0
    ORDER BY next_trigger_time
    LIMIT #{size}
  </select>

  <update id="updateNextScanTime" parameterType="cn.ponfee.disjob.core.model.SchedJob">
    UPDATE <include refid="Table_Name" />
    SET next_scan_time = #{nextScanTime,jdbcType=TIMESTAMP},
        failed_scan_count = #{failedScanCount,jdbcType=INTEGER},
        version = version+1
    WHERE job_id = #{jobId,jdbcType=BIGINT}
      AND version = #{version,jdbcType=INTEGER}
      AND is_deleted = 0
  </update>

  <update id="stop" parameterType="cn.ponfee.disjob.core.model.SchedJob">
    UPDATE <include refid="Table_Name" />
    SET job_state = 0,
        next_trigger_time = #{nextTriggerTime,jdbcType=BIGINT},
        remark = #{remark,jdbcType=VARCHAR},
        version = version+1
    WHERE job_id = #{jobId,jdbcType=BIGINT}
      AND job_state = 1
      AND version = #{version,jdbcType=INTEGER}
      AND is_deleted = 0
  </update>

  <update id="updateNextTriggerTime" parameterType="cn.ponfee.disjob.core.model.SchedJob">
    UPDATE <include refid="Table_Name" />
    SET job_state = #{jobState,jdbcType=TINYINT},
        last_trigger_time = #{lastTriggerTime,jdbcType=BIGINT},
        next_trigger_time = #{nextTriggerTime,jdbcType=BIGINT},
        failed_scan_count = 0,
        version = version+1
    WHERE job_id = #{jobId,jdbcType=BIGINT}
      AND job_state = 1
      AND version = #{version,jdbcType=INTEGER}
      AND is_deleted = 0
  </update>

  <update id="updateState">
    UPDATE <include refid="Table_Name" />
    SET job_state = #{toState,jdbcType=TINYINT},
        version = version+1
    WHERE job_id = #{jobId,jdbcType=BIGINT}
      AND job_state = #{fromState,jdbcType=TINYINT}
      AND is_deleted = 0
  </update>

  <update id="deleteByJobId" parameterType="_long">
    UPDATE <include refid="Table_Name" />
    SET is_deleted = NULL,
        version = version+1
    WHERE job_id = #{jobId,jdbcType=BIGINT}
      AND job_state = 0
      AND is_deleted = 0
  </update>

</mapper>
